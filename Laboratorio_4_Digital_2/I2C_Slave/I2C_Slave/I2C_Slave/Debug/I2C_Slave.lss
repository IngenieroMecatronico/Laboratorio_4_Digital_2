
I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000270  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c7  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000760  00000000  00000000  00000c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051d  00000000  00000000  0000137f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041f  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000243  00000000  00000000  00001daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001ff2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  88:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Slave_Init>:
	}
}

//Funcion para inicializar I2C Esclavo
void I2C_Slave_Init(uint8_t address){
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); //Pines de I2C como entradas
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7
	
	TWAR = address << 1; //Se asigna la dirección que tendrá
  96:	88 0f       	add	r24, r24
  98:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	// TWAR = address << 1 |0x01; //Se asigna la dirección que tendrá y habilita la llamada general
	
	
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  9c:	85 e4       	ldi	r24, 0x45	; 69
  9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a2:	08 95       	ret

000000a4 <main>:
//0x3C por que allí estan los leds, de D2 a D5.
//0xFC ya que los botones están en PB1 y PB2
//0 para apagar los botones.
int main(void)
{
	DDRB = 0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
  a8:	15 b8       	out	0x05, r1	; 5
	DDRC &= ~(1<<PORTC0);
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1<<PORTC1);
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	87 b9       	out	0x07, r24	; 7
	PCICR |= (1 << PCIE1);
  b6:	e8 e6       	ldi	r30, 0x68	; 104
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8)|(1<<PCINT9);
  c0:	ec e6       	ldi	r30, 0x6C	; 108
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
	I2C_Slave_Init(SlaveAddress);
  ca:	80 e3       	ldi	r24, 0x30	; 48
  cc:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Slave_Init>
	//PORTC = 0;
	//puertos(0x3C, 0xFC, 0);
	sei();
  d0:	78 94       	sei
    {
		//PORTB = (contador);
		//salida = (contador << 2);
		//PORTD = salida;
		
		if (aumenta == 1)
  d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <aumenta>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	a1 f4       	brne	.+40     	; 0x102 <main+0x5e>
		{
			if (contador < 15)
  da:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
  de:	8f 30       	cpi	r24, 0x0F	; 15
  e0:	40 f4       	brcc	.+16     	; 0xf2 <main+0x4e>
			{
				contador++;
  e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
				aumenta = 0;
  ec:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <aumenta>
  f0:	08 c0       	rjmp	.+16     	; 0x102 <main+0x5e>
			}
			else if (contador == 15)
  f2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
  f6:	8f 30       	cpi	r24, 0x0F	; 15
  f8:	21 f4       	brne	.+8      	; 0x102 <main+0x5e>
			{
				contador = 15;
  fa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
				aumenta = 0;
  fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <aumenta>
			}
		}
		if (disminuye == 1)
 102:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <disminuye>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	a1 f4       	brne	.+40     	; 0x132 <main+0x8e>
		{
			if (contador > 0)
 10a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 10e:	88 23       	and	r24, r24
 110:	41 f0       	breq	.+16     	; 0x122 <main+0x7e>
			{
				contador--;
 112:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 116:	81 50       	subi	r24, 0x01	; 1
 118:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
				disminuye = 0;
 11c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <disminuye>
 120:	08 c0       	rjmp	.+16     	; 0x132 <main+0x8e>
			}
			else if (contador == 0)
 122:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 126:	81 11       	cpse	r24, r1
 128:	04 c0       	rjmp	.+8      	; 0x132 <main+0x8e>
			{
				contador = 0;
 12a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <contador>
				disminuye = 0;
 12e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <disminuye>
			}
			
			//contador--;
		}
		PORTB = (contador);
 132:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 136:	85 b9       	out	0x05, r24	; 5
	
	}
 138:	cc cf       	rjmp	.-104    	; 0xd2 <main+0x2e>

0000013a <__vector_4>:


//*****************
// ISR de UART
//*****************
ISR(PCINT1_vect){
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
	if (!(PINC & (1<<PORTC0)))   //Si se detecta un cambio en PINB y fué en el puerto PB0, aumenta el contador de los leds.
 146:	30 99       	sbic	0x06, 0	; 6
 148:	03 c0       	rjmp	.+6      	; 0x150 <__vector_4+0x16>
	{
		
		//contador++;
		aumenta = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <aumenta>
	}
	if (!(PINC & (1<<PORTC1))) //Si se detecta cambio en PINB y fué Puerto PB1, disminuye el contador.
 150:	31 99       	sbic	0x06, 1	; 6
 152:	03 c0       	rjmp	.+6      	; 0x15a <__vector_4+0x20>
	{
		disminuye = 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <disminuye>
		//contador--;
	}
}
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__vector_24>:
// 		TWCR |= (1<<TWINT)|(1<<TWSTO);
// 		break;
// 	}
// }

ISR(TWI_vect){
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	8f 93       	push	r24
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
	uint8_t estado = TWSR & 0xF8; // Máscara correcta para el estado
 176:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17a:	88 7f       	andi	r24, 0xF8	; 248
	switch(estado){
 17c:	80 39       	cpi	r24, 0x90	; 144
 17e:	a9 f0       	breq	.+42     	; 0x1aa <__vector_24+0x44>
 180:	38 f4       	brcc	.+14     	; 0x190 <__vector_24+0x2a>
 182:	80 37       	cpi	r24, 0x70	; 112
 184:	61 f0       	breq	.+24     	; 0x19e <__vector_24+0x38>
 186:	80 38       	cpi	r24, 0x80	; 128
 188:	81 f0       	breq	.+32     	; 0x1aa <__vector_24+0x44>
 18a:	80 36       	cpi	r24, 0x60	; 96
 18c:	41 f5       	brne	.+80     	; 0x1de <__vector_24+0x78>
 18e:	07 c0       	rjmp	.+14     	; 0x19e <__vector_24+0x38>
 190:	88 3b       	cpi	r24, 0xB8	; 184
 192:	a9 f0       	breq	.+42     	; 0x1be <__vector_24+0x58>
 194:	80 3c       	cpi	r24, 0xC0	; 192
 196:	e9 f0       	breq	.+58     	; 0x1d2 <__vector_24+0x6c>
 198:	88 3a       	cpi	r24, 0xA8	; 168
 19a:	09 f5       	brne	.+66     	; 0x1de <__vector_24+0x78>
 19c:	10 c0       	rjmp	.+32     	; 0x1be <__vector_24+0x58>
		case 0x60: // Dirección recibida, listo para recibir
		case 0x70: // Dirección recibida en modo general call
		TWCR |= (1<<TWINT)|(1<<TWEA);
 19e:	ec eb       	ldi	r30, 0xBC	; 188
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 6c       	ori	r24, 0xC0	; 192
 1a6:	80 83       	st	Z, r24
		break;
 1a8:	1f c0       	rjmp	.+62     	; 0x1e8 <__vector_24+0x82>
		case 0x80: // Datos recibidos y ACK enviado
		case 0x90:
		buffer = TWDR; // Guardar dato recibido
 1aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		TWCR |= (1<<TWINT)|(1<<TWEA); // Responder con ACK
 1b2:	ec eb       	ldi	r30, 0xBC	; 188
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 6c       	ori	r24, 0xC0	; 192
 1ba:	80 83       	st	Z, r24
		break;
 1bc:	15 c0       	rjmp	.+42     	; 0x1e8 <__vector_24+0x82>
		case 0xA8: // Dirección con bit de lectura recibida
		case 0xB8: // Maestro está esperando datos
		TWDR = contador; // Enviar el dato
 1be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 1c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1<<TWINT)|(1<<TWEA); // Continuar transmisión
 1c6:	ec eb       	ldi	r30, 0xBC	; 188
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	80 6c       	ori	r24, 0xC0	; 192
 1ce:	80 83       	st	Z, r24
		break;
 1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <__vector_24+0x82>
		case 0xC0: // Maestro envió NACK, fin de la transmisión
		TWCR |= (1<<TWINT)|(1<<TWEA);
 1d2:	ec eb       	ldi	r30, 0xBC	; 188
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 6c       	ori	r24, 0xC0	; 192
 1da:	80 83       	st	Z, r24
		break;
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <__vector_24+0x82>
		default: // Liberar el bus en caso de error
		TWCR |= (1<<TWINT)|(1<<TWSTO);
 1de:	ec eb       	ldi	r30, 0xBC	; 188
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	80 69       	ori	r24, 0x90	; 144
 1e6:	80 83       	st	Z, r24
		break;
	}
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
