
I2C_Slave_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a29  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000856  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005dd  00000000  00000000  000015ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000272  00000000  00000000  00002112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  88:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
#include "ADC.h"
#include <util/delay.h>

void ADC_init(void) {
	DDRC &= ~(1 << PORTC0); // Configurar PC1 como entrada
  90:	87 b1       	in	r24, 0x07	; 7
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	87 b9       	out	0x07, r24	; 7
	ADMUX = (1 << REFS0); // Voltaje de referencia AVcc (5V)
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC y preescaler de 128 (125kHz)
  9c:	87 e8       	ldi	r24, 0x87	; 135
  9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a2:	08 95       	ret

000000a4 <ADC_read>:
}

uint16_t ADC_read(uint8_t canal) {
	canal &= 0b00001111;
  a4:	8f 70       	andi	r24, 0x0F	; 15
	ADMUX = (ADMUX & 0xF0) | canal; // Seleccionar el canal
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	90 7f       	andi	r25, 0xF0	; 240
  ae:	89 2b       	or	r24, r25
  b0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Iniciar la conversión
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Esperar a que la conversión termine
  bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c0:	86 fd       	sbrc	r24, 6
  c2:	fc cf       	rjmp	.-8      	; 0xbc <ADC_read+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	87 ea       	ldi	r24, 0xA7	; 167
  c6:	91 e6       	ldi	r25, 0x61	; 97
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <ADC_read+0x24>
  cc:	00 c0       	rjmp	.+0      	; 0xce <ADC_read+0x2a>
  ce:	00 00       	nop
	_delay_ms(100);
	return (ADC<<2);// Leer el resultado
  d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	08 95       	ret

000000e2 <I2C_Slave_Init>:
	}
}

//Funcion para inicializar I2C Esclavo
void I2C_Slave_Init(uint8_t address){
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); //Pines de I2C como entradas
  e2:	97 b1       	in	r25, 0x07	; 7
  e4:	9f 7c       	andi	r25, 0xCF	; 207
  e6:	97 b9       	out	0x07, r25	; 7
	
	TWAR = address << 1; //Se asigna la dirección que tendrá
  e8:	88 0f       	add	r24, r24
  ea:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	// TWAR = address << 1 |0x01; //Se asigna la dirección que tendrá y habilita la llamada general
	
	
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  ee:	85 e4       	ldi	r24, 0x45	; 69
  f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f4:	08 95       	ret

000000f6 <main>:
//***************************
// Codigo principal
//***************************
int main(void)
{
	sei();
  f6:	78 94       	sei
	ADC_init();
  f8:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	DDRB |= (1<<DDB5);
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<DDB5);
 102:	84 b1       	in	r24, 0x04	; 4
 104:	8f 7d       	andi	r24, 0xDF	; 223
 106:	84 b9       	out	0x04, r24	; 4
	I2C_Slave_Init(SlaveAddress);
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	0e 94 71 00 	call	0xe2	; 0xe2 <I2C_Slave_Init>
	
    while (1) 
    {
		valoradc = ADC_read(0);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_read>
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(buffer == 'R'){
 11a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <buffer>
 11e:	82 35       	cpi	r24, 0x52	; 82
 120:	b1 f7       	brne	.-20     	; 0x10e <main+0x18>
			PORTB |= (1<<PINB5);  // Activar el pin PB5 (LED, relay, etc.)
 122:	85 b1       	in	r24, 0x05	; 5
 124:	80 62       	ori	r24, 0x20	; 32
 126:	85 b9       	out	0x05, r24	; 5
			buffer = 0;         // Reiniciar el buffer
 128:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <buffer>
 12c:	f0 cf       	rjmp	.-32     	; 0x10e <main+0x18>

0000012e <__vector_24>:

//***************************
// ISR
//***************************

ISR(TWI_vect){
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xF8;
 13e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 142:	88 7f       	andi	r24, 0xF8	; 248
	switch(estado){
 144:	80 38       	cpi	r24, 0x80	; 128
 146:	99 f0       	breq	.+38     	; 0x16e <__vector_24+0x40>
 148:	28 f4       	brcc	.+10     	; 0x154 <__vector_24+0x26>
 14a:	80 36       	cpi	r24, 0x60	; 96
 14c:	51 f0       	breq	.+20     	; 0x162 <__vector_24+0x34>
 14e:	80 37       	cpi	r24, 0x70	; 112
 150:	41 f0       	breq	.+16     	; 0x162 <__vector_24+0x34>
 152:	1f c0       	rjmp	.+62     	; 0x192 <__vector_24+0x64>
 154:	88 3a       	cpi	r24, 0xA8	; 168
 156:	a9 f0       	breq	.+42     	; 0x182 <__vector_24+0x54>
 158:	88 3b       	cpi	r24, 0xB8	; 184
 15a:	99 f0       	breq	.+38     	; 0x182 <__vector_24+0x54>
 15c:	80 39       	cpi	r24, 0x90	; 144
 15e:	c9 f4       	brne	.+50     	; 0x192 <__vector_24+0x64>
 160:	06 c0       	rjmp	.+12     	; 0x16e <__vector_24+0x40>
		case 0x60:
		case 0x70:
		TWCR |= (1<< TWINT);
 162:	ec eb       	ldi	r30, 0xBC	; 188
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	80 83       	st	Z, r24
		break;
 16c:	17 c0       	rjmp	.+46     	; 0x19c <__vector_24+0x6e>
		case 0x80:
		case 0x90:
		buffer = TWDR;
 16e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 172:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <buffer>
		TWCR |= (1<< TWINT); // Se limpia la bandera
 176:	ec eb       	ldi	r30, 0xBC	; 188
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 68       	ori	r24, 0x80	; 128
 17e:	80 83       	st	Z, r24
		break;
 180:	0d c0       	rjmp	.+26     	; 0x19c <__vector_24+0x6e>
		case 0xA8:
		case 0xB8:
		TWDR = valoradc; // Cargar el dato
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 186:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWEN)|(1 << TWIE)|(1 << TWINT)|(1 << TWEA); // Inicia el envío
 18a:	85 ec       	ldi	r24, 0xC5	; 197
 18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 190:	05 c0       	rjmp	.+10     	; 0x19c <__vector_24+0x6e>
		default: // Se libera el bus de cualquier error
		TWCR |= (1 << TWINT)|(1 << TWSTO);
 192:	ec eb       	ldi	r30, 0xBC	; 188
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 69       	ori	r24, 0x90	; 144
 19a:	80 83       	st	Z, r24
		break;
	}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
